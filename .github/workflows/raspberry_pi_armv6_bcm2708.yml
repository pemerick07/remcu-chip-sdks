# This is a basic workflow to help you get started with Actions

name: Raspberry_pi_1_armv6

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  pull_request:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    
    env:
      LLVM_ADIN_PATH: ${{ github.workspace }}/Linux_x64/
      PRETTY_OUTPUT_DIR: 1
      RASPBERRY_TOOL_PATH: ${{ github.workspace }}/tools/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: update submodules
        run: |
          git submodule update --init

      # Runs a single command using the runners shell
      - name: download Adin
        run: |
          wget https://github.com/remotemcu/adin-llvm/releases/download/llvm-8.0-adin-1.0/Linux_x64.zip
          unzip Linux_x64.zip

      # Runs a set of commands using the runners shell
      - name: prepare package
        run: |
          sudo apt update
          sudo apt install micro mc gcc-multilib g++-multilib 
          sudo apt purge clang-*
          sudo apt install clang-8
          echo "/usr/lib/llvm-8/bin/" >> $GITHUB_PATH
          git clone https://github.com/raspberrypi/tools

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=REMCU/platform/raspberry_pi_armv6_bcm2708.cmake
    
      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build 

      - name: Zip artifacts
        run: |
          zip -qqr build_folder.zip ${{github.workspace}}/build
          ls -la build_folder.zip
          ls -lh build_folder.zip

      - uses: actions/upload-artifact@v3
        with:
          name: build_folder
          path: build_folder.zip
          if-no-files-found: error

        
      - name: Commit & push
        if: github.actor == 'ser-mk'
        run: |
          git clone https://ser-mk:${{ secrets.TOKEN_PUSH }}@github.com/remotemcu/prebuilt_libraries.git
          git config --global user.email "en.chormonov@gmail.com"
          git config --global user.name "Evgeny Chormonov"
          cp -rf build/output/* prebuilt_libraries/
          cd prebuilt_libraries/
          git add .
          git status
          git commit -m "update raspberry" || true
          git push origin master
