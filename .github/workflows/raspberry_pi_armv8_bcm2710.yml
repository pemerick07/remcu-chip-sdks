name: Raspberry_pi_zero_2_w_armv8
on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-20.04
    
    env:
      LLVM_ADIN_PATH: ${{ github.workspace }}/Linux_x64/
      PRETTY_OUTPUT_DIR: 1
      RASPBERRY_TOOL_PATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: update submodules
        run: | 
          git submodule update --remote
          
      - name: download Adin
        run: |
          wget https://github.com/remotemcu/adin-llvm/releases/download/llvm-8.0-adin-1.0/Linux_x64.zip
          unzip Linux_x64.zip
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install micro mc gcc-multilib g++-multilib 
          sudo apt purge clang-*
          sudo apt install clang-8
          echo "/usr/lib/llvm-8/bin/" >> $GITHUB_PATH
      - name: download ARMv8 toolchain
        run: |
          wget https://github.com/tttapa/docker-arm-cross-toolchain/releases/latest/download/x-tools-armv8-rpi3-linux-gnueabihf-gcc12.tar.xz -O- | tar xJ -C ${{ github.workspace }}      
      - name: Set environment variables
        run: |
          echo "RASPBERRY_TOOL_PATH=${{ github.workspace }}/x-tools/armv8-rpi3-linux-gnueabihf" >> $GITHUB_ENV
      - name: checkout remcu fork
        run: |
          git clone https://github.com/emrxv/remcu 
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/tools/armv8-rpi3-linux-gnueabihf/armv8-rpi3-linux-gnueabihf.toolchain.cmake
    
      - name: Build
        run: cmake --build ${{github.workspace}}/build 
      - name: Zip artifacts
        run: |
          zip -qqr build_folder.zip ${{github.workspace}}/build
          ls -la build_folder.zip
          ls -lh build_folder.zip
      - uses: actions/upload-artifact@v3
        with:
          name: build_folder
          path: build_folder.zip
          if-no-files-found: error
      - name: Commit & push
        if: github.actor == 'ser-mk'
        run: |
          git clone https://ser-mk:${{ secrets.TOKEN_PUSH }}@github.com/remotemcu/prebuilt_libraries.git
          git config --global user.email "en.chormonov@gmail.com"
          git config --global user.name "Evgeny Chormonov"
          cp -rf build/output/* prebuilt_libraries/
          cd prebuilt_libraries/
          git add .
          git status
          git commit -m "update raspberry" || true
          git push origin master
